import Trip from '../models/tripModel.js';
import Voucher from '../models/voucherModel.js';

export const getAllTrips = async (req, res) => {
  try {
    const trips = await Trip.find()
      .populate('driver')
      .populate('vehicle')
      .populate('vouchers')
      .sort({ createdAt: -1 }); // Sort by newest first

    res.json({ success: true, data: trips });
  } catch (err) {
    console.error('Error fetching trips:', err);
    res.status(500).json({ 
      success: false, 
      message: 'Failed to fetch trips',
      error: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
  }
};

export const createTrip = async (req, res) => {
  try {
    console.log('Received trip creation payload:', req.body);
    const { driver, vehicle, departureLocation, destinationLocation, vouchers = [] } = req.body;
    
    // Create the trip (tripNumber will be auto-generated by the model)
    const trip = new Trip({ 
      driver, 
      vehicle, 
      departureLocation, 
      destinationLocation, 
      vouchers 
    });
    
    await trip.save();

    // Update vouchers to mark them as used in a trip
    if (vouchers?.length > 0) {
      await Voucher.updateMany(
        { _id: { $in: vouchers } }, 
        { trip_made: true, trip: trip._id } // Also reference the trip
      );
    }

    // Fully populate the trip before returning
    const populatedTrip = await Trip.findById(trip._id)
      .populate('driver')
      .populate('vehicle')
      .populate('vouchers');

    res.status(201).json({ 
      success: true, 
      data: populatedTrip,
      message: 'Trip created successfully'
    });
  } catch (err) {
    console.error('Trip creation error:', err);
    res.status(400).json({ 
      success: false, 
      message: err.code === 11000 ? 'Trip number must be unique' : 'Failed to create trip',
      error: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
  }
};

export const getTripById = async (req, res) => {
  try {
    const trip = await Trip.findById(req.params.id)
      .populate('driver')
      .populate('vehicle')
      .populate('vouchers');

    if (!trip) {
      return res.status(404).json({ 
        success: false, 
        message: 'Trip not found' 
      });
    }

    res.json({ success: true, data: trip });
  } catch (err) {
    console.error('Error fetching trip:', err);
    res.status(500).json({ 
      success: false, 
      message: 'Failed to fetch trip',
      error: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
  }
};

export const updateTrip = async (req, res) => {
  try {
    const { vouchers, ...updateData } = req.body;
    const trip = await Trip.findById(req.params.id);

    if (!trip) {
      return res.status(404).json({ 
        success: false, 
        message: 'Trip not found' 
      });
    }

    // Handle voucher updates if they're being modified
    if (vouchers !== undefined) {
      // First, reset trip_made status on vouchers being removed
      const removedVouchers = trip.vouchers.filter(v => !vouchers.includes(v.toString()));
      if (removedVouchers.length > 0) {
        await Voucher.updateMany(
          { _id: { $in: removedVouchers } },
          { $unset: { trip_made: 1, trip: 1 } }
        );
      }

      // Then update the new vouchers
      if (vouchers.length > 0) {
        await Voucher.updateMany(
          { _id: { $in: vouchers } },
          { trip_made: true, trip: trip._id }
        );
      }

      trip.vouchers = vouchers;
    }

    // Update other fields
    Object.assign(trip, updateData);
    const updatedTrip = await trip.save();

    // Populate before returning
    const populatedTrip = await Trip.findById(updatedTrip._id)
      .populate('driver')
      .populate('vehicle')
      .populate('vouchers');

    res.json({ 
      success: true, 
      data: populatedTrip,
      message: 'Trip updated successfully'
    });
  } catch (err) {
    console.error('Error updating trip:', err);
    res.status(400).json({ 
      success: false, 
      message: err.code === 11000 ? 'Trip number must be unique' : 'Failed to update trip',
      error: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
  }
};

export const deleteTrip = async (req, res) => {
  try {
    const trip = await Trip.findById(req.params.id);

    if (!trip) {
      return res.status(404).json({ 
        success: false, 
        message: 'Trip not found' 
      });
    }

    // Reset voucher references before deleting
    if (trip.vouchers?.length > 0) {
      await Voucher.updateMany(
        { _id: { $in: trip.vouchers } },
        { $unset: { trip_made: 1, trip: 1 } }
      );
    }

    await trip.deleteOne();

    res.json({ 
      success: true, 
      message: 'Trip deleted successfully',
      deletedTripId: trip._id
    });
  } catch (err) {
    console.error('Error deleting trip:', err);
    res.status(500).json({ 
      success: false, 
      message: 'Failed to delete trip',
      error: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
  }
};